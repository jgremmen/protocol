plugins {
  id 'java-library'
  id 'idea'
  id 'maven-publish'
  id 'nebula.optional-base' version '5.0.3'
  id 'jacoco'
  id 'signing'
  id "org.sonarqube" version "3.0"
  id 'io.franzbecker.gradle-lombok' version '5.0.0'
}


description 'Protocol Library'
group 'de.sayayi.lib'
version '1.0.1'

buildDir = ".build"


ext {
  jetbrainsAnnotationsVersion = "22.0.0"
  junitVersion = "5.8.1"
  lombokVersion = "1.18.22"
  messageFormatVersion = "0.6.1"
  mockitoVersion = "4.0.0"
  unbescapeVersion = "1.1.6.RELEASE"
}


lombok {
  version = lombokVersion
  sha256 = ""
}


java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(8)
  }
}


test {
  useJUnitPlatform()
}


import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
  javaLauncher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(8)
  }

  ext.outputDir = file("$buildDir/delombok")
  outputs.dir(outputDir)

  sourceSets.main.java.srcDirs.each {
    inputs.dir(it)
    args(it, "-d", outputDir)
  }

  doFirst {
    outputDir.deleteDir();
  }
}


apply from: file('gradle/javadoc.gradle')
apply from: file('gradle/quality.gradle')
apply from: file('gradle/publishing.gradle')


repositories {
  mavenCentral()
}


dependencies {
  // java
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  implementation "org.unbescape:unbescape:${unbescapeVersion}", optional
  implementation "de.sayayi.lib:message-format-nodep:${messageFormatVersion}", optional

  compileOnlyApi "org.projectlombok:lombok:${lombokVersion}"
  compileOnlyApi "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"

  // test
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testImplementation "org.mockito:mockito-core:${mockitoVersion}"

  testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
  testCompileOnly "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"

  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}
